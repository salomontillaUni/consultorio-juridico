create type estado_civil_enum as enum (
  'soltero',
  'casado',
  'uniÃ³n libre',
  'otro'
);

create type situacion_laboral_enum as enum (
  'independiente',
  'dependiente',
  'desempleado',
  'otro'
);

CREATE TABLE usuarios (
    id_usuario UUID PRIMARY KEY,
    nombre_completo VARCHAR(100) NOT NULL,
    sexo CHAR(1),
    cedula VARCHAR(45) UNIQUE,
    telefono VARCHAR(45),
    edad INTEGER,
    contacto_familiar VARCHAR(100),
    estado_civil estado_civil_enum,
    estrato INTEGER,
    direccion VARCHAR(100),
    correo VARCHAR(100),
    tipo_vivienda VARCHAR(50),
    situacion_laboral situacion_laboral_enum,
    otros_ingresos BOOLEAN,
    valor_otros_ingresos NUMERIC(10,2),
    concepto_otros_ingresos VARCHAR(100),
    tiene_contrato BOOLEAN NOT NULL,
    tiene_representado BOOLEAN NOT NULL
);

create type turno_enum as enum (
  '9-11',
  '2-4',
  '4-6'
);

create type area_enum as enum (
  'laboral',
  'familia',
  'penal',
  'civil',
  'otros'
);
-- ===========================
-- ESTUDIANTES, PERFILES Y ASESORES
-- ===========================

create table public.perfiles (
  id uuid not null references auth.users on delete cascade,
  nombre_completo text,
  correo text,
  cedula text,
  telefono text,
  primary key (id)
);

-- FUNCION PARA ACTUALIZAR EL PERFIL AL CAMBIAR DATOS EN AUTH.USERS
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.perfiles (id, nombre_completo, correo, cedula, telefono)
  values (new.id, 
  new.raw_user_meta_data ->> 'nombre_completo', 
  new.raw_user_meta_data ->> 'correo', 
  new.raw_user_meta_data ->> 'cedula', 
  new.raw_user_meta_data ->> 'telefono');
  return new;
end;
$$;

-- TRIGGER PARA EJECUTAR LA FUNCION AL CREAR UN NUEVO USUARIO
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

alter table public.perfiles enable row level security;

create type jornada_enum as enum (
  'diurna',
  'nocturna',
  'mixto'
);

CREATE TABLE estudiantes  (
    id_perfil UUID PRIMARY KEY REFERENCES perfiles(id) ON DELETE CASCADE,
    semestre INTEGER,
    jornada jornada_enum,
    turno turno_enum
);

CREATE TABLE asesores (
    id_perfil UUID PRIMARY KEY REFERENCES perfiles(id) ON DELETE CASCADE,
    turno turno_enum,
    area area_enum
);


-- ===========================
-- ROLES Y AUTENTICACION
-- ===========================
create type public.app_role as enum ('admin', 'pro_apoyo', 'estudiante', 'asesor');
create type public.app_permission as enum ('casos.delete',
 'usuarios.delete',
  'estudiantes.delete',
  'asesores.delete',
  'contratos_laborales.delete',
  'estudiantes_casos.delete',
  'asesores_casos.delete',
  'demandados.delete',
  'perfiles.delete',

  'casos.update',
  'usuarios.update',
  'estudiantes.update',
  'asesores.update',
  'contratos_laborales.update',
  'estudiantes_casos.update',
  'asesores_casos.update',
  'demandados.update',
  'perfiles.update',

  'casos.create',
  'usuarios.create',
  'estudiantes.create',
  'asesores.create',
  'contratos_laborales.create',
  'estudiantes_casos.create',
  'asesores_casos.create',
  'demandados.create',
  'perfiles.insert',
  
  'casos.read',
  'usuarios.read',
  'estudiantes.read',
  'asesores.read',
  'contratos_laborales.read',
  'estudiantes_casos.read',
  'asesores_casos.read',
  'demandados.read',
  'perfiles.read'
  );
-- USER ROLES
create table public.perfiles_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references auth.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);

comment on table public.perfiles_roles is 'roles asignados a cada usuario.';
-- ROLE PERMISSIONS
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'permisos asignados a cada rol.';
-- ===========================
-- CASOS Y RELACIONES
-- ===========================
create type estado_enum as enum (
    'aprobado',
    'en_proceso',
    'pendiente_aprobacion',
    'cerrado',
    'archivado'
);

CREATE TABLE casos (
    id_caso SERIAL PRIMARY KEY,
    id_usuario UUID NOT NULL REFERENCES usuarios(id_usuario),
    resumen_hechos TEXT,
    observaciones TEXT,
    fecha_creacion DATE NOT NULL DEFAULT CURRENT_DATE,
    estado estado_enum NOT NULL DEFAULT 'pendiente_aprobacion',
    fecha_cierre DATE,
    aprobacion_asesor BOOLEAN NOT NULL default false,
    area area_enum NOT NULL,
    tipo_proceso TEXT NOT NULL
);


CREATE TABLE demandados (
    id_demandado SERIAL PRIMARY KEY,
    id_caso INTEGER REFERENCES casos(id_caso),
    nombre_completo VARCHAR(100) NOT NULL,
    documento VARCHAR(45),
    celular VARCHAR(45),
    lugar_residencia VARCHAR(100),
    correo VARCHAR(100)
);


CREATE TABLE estudiantes_casos (
    id_estudiante UUID REFERENCES estudiantes(id_perfil),
    id_caso INTEGER REFERENCES casos(id_caso),
    fecha_asignacion DATE,
    fecha_fin_asignacion DATE,
    PRIMARY KEY (id_estudiante, id_caso)
);

CREATE TABLE asesores_casos (
    id_asesor UUID REFERENCES asesores(id_perfil),
    id_caso INTEGER REFERENCES casos(id_caso),
    fecha_asignacion DATE,
    fecha_fin_asignacion DATE,
    PRIMARY KEY (id_asesor, id_caso)
);

-- ===========================
-- CONTRATOS LABORALES
-- ===========================
create type tipo_contrato_enum as enum (
  'escrito',
  'verbal',
  'prestacion_servicios',
  'otro'
);
CREATE TABLE contratos_laborales (
    id_contrato SERIAL PRIMARY KEY,
    id_usuario UUID REFERENCES usuarios(id_usuario),
    tipo_contrato tipo_contrato_enum,
    representante_legal VARCHAR(100),
    correo_patrono VARCHAR(100),
    direccion_empresa VARCHAR(100),
    fecha_inicio DATE,
    fecha_fin DATE,
    continua BOOLEAN,
    salario_inicial NUMERIC(10,2),
    salario_actual NUMERIC(10,2)
);

alter table usuarios enable row level security;
alter table casos enable row level security;
alter table perfiles_roles enable row level security;
alter table estudiantes enable row level security;
alter table asesores enable row level security;
alter table contratos_laborales enable row level security;
alter table demandados enable row level security;
alter table estudiantes_casos enable row level security;
alter table asesores_casos enable row level security;
alter table perfiles enable row level security;